package views

import (
	"github.com/Dionid/teleblog/libs/teleblog"
	"github.com/Dionid/teleblog/cmd/teleblog/httpapi/views/partials"
	"github.com/Dionid/teleblog/libs/templu"
	"github.com/pocketbase/pocketbase/tools/types"
	"fmt"
	"path"
	"math"
	"strings"
)

type IndexPagePostAlbumPost struct {
	Id string `db:"id" json:"id"`
	Media string `db:"media" json:"media"`
	Text string `db:"text" json:"text"`
}

type LinkPreview struct {
    URL         string
    Title       string
    Description string
    Image       string
}

type InpexPagePost struct {
	teleblog.Post
	TgMessageRaw types.JsonMap `db:"tg_message_raw" json:"-"`
	CommentsCount int `db:"comments_count" json:"comments_count"`
	TgChatUsername string `db:"tg_chat_username" json:"tg_chat_username"`
	TextWithMarkup string `json:"text_with_markup"`
	AlbumPosts types.JsonArray[IndexPagePostAlbumPost] `db:"album_posts" json:"album_posts"`
	LinkPreview *LinkPreview `json:"link_preview"`
}

type PaginationData struct {
	Total int64
	PerPage int64
	CurrentPage int64
}

func (p *PaginationData) TotalPages() int {
	return int(math.Ceil(float64(p.Total) / float64(p.PerPage)))
}

templ Pagination(data PaginationData) {
	if data.TotalPages() < 7 {
		<div class="join">
			for i := 1; i <= data.TotalPages(); i++ {
				<a
					@click={ fmt.Sprintf("setPage(%d, $event)", i) }
					href={ templ.SafeURL("?page=" + fmt.Sprintf("%d", i)) }
					class={ "join-item", "btn", "border-transparent", templ.KV("btn-primary", i == int(data.CurrentPage)), templ.KV("bg-white", i != int(data.CurrentPage)) }
				>{ fmt.Sprintf("%d", i) }</a>
			}
		</div>
	} else {
		<div class="join">
			<a
				@click={ fmt.Sprintf("setPage(%d, $event)", 1) }
				href={ templ.SafeURL("?page=" + fmt.Sprintf("%d", 1)) }
				class={ "join-item", "btn", "border-transparent", templ.KV("btn-primary", 1 == int(data.CurrentPage)), templ.KV("bg-white", 1 != int(data.CurrentPage)) }
			>
				1
			</a>
			if data.CurrentPage > 3 {
				<div
					class={ "join-item", "btn", "border-transparent", "bg-white" }
				>
					...
				</div>
			}
			if data.CurrentPage > 2 {
				<a
					@click={ fmt.Sprintf("setPage(%d, $event)", data.CurrentPage - 1) }
					href={ templ.SafeURL("?page=" + fmt.Sprintf("%d", data.CurrentPage - 1)) }
					class={ "join-item", "btn", "border-transparent", "bg-white" }
				>
					{ fmt.Sprintf("%d", data.CurrentPage - 1) }
				</a>
			}
			if data.CurrentPage != 1 && int(data.CurrentPage) != data.TotalPages() {
				<a
					@click={ fmt.Sprintf("setPage(%d, $event)", data.CurrentPage) }
					href={ templ.SafeURL("?page=" + fmt.Sprintf("%d", data.CurrentPage)) }
					class={ "join-item", "btn", "border-transparent", "btn-primary" }
				>
					{ fmt.Sprintf("%d", data.CurrentPage) }
				</a>
			}
			if int(data.CurrentPage) < data.TotalPages() - 1 {
				<a
					@click={ fmt.Sprintf("setPage(%d, $event)", data.CurrentPage + 1) }
					href={ templ.SafeURL("?page=" + fmt.Sprintf("%d", data.CurrentPage + 1)) }
					class={ "join-item", "btn", "border-transparent", "bg-white" }
				>
					{ fmt.Sprintf("%d", data.CurrentPage + 1) }
				</a>
			}
			if int(data.CurrentPage) < data.TotalPages() - 2 {
				<div
					class={ "join-item", "btn", "border-transparent", "bg-white" }
				>
					...
				</div>
			}
			<a
				@click={ fmt.Sprintf("setPage(%d, $event)", data.TotalPages()) }
				href={ templ.SafeURL("?page=" + fmt.Sprintf("%d", data.TotalPages())) }
				class={ "join-item", "btn", "border-transparent", templ.KV("btn-primary", data.TotalPages() == int(data.CurrentPage)), templ.KV("bg-white", data.TotalPages() != int(data.CurrentPage)) }
			>
				{ fmt.Sprintf("%d", data.TotalPages()) }
			</a>
		</div>
	}
}

type IndexPageInfo struct {
	Description string

	SelectedTag string
	TextSearch string

	Header partials.HeaderData
	Footer partials.FooterData
}

templ IndexPage(base BaseLayoutData, info IndexPageInfo, pagination PaginationData, posts []*InpexPagePost, tags []*teleblog.Tag) {
	@BaseLayout(base) {
		<div class="flex flex-col w-full justify-center items-center">
			<div class="w-full flex justify-center max-w-6xl">
				<div class="w-full flex flex-col justify-center max-w-3xl">
					<div class="w-full p-3 sm:p-6">
						@partials.Header(info.Header)
					</div>
					<div class="w-full flex flex-col justify-center p-3 sm:p-6">
						if info.Description != "" {
							<div class="card shadow-sm bg-white">
								<div class="card-body flex-col p-4 items-center md:flex-row">
									@templ.Raw(info.Description)
								</div>
							</div>
						}
						<script src={ templu.PathWithVersion(ctx, "/public/widgets/posts-list-widget.js") }></script>
						@templ.JSONScript("posts-list-widget-data", posts)
						<div id="posts-list-widget" class="flex flex-col w-full items-center pt-6">
							<div class="flex flex-col gap-4 w-full">
								<div class="flex w-full justify-between items-center">
									<div class="join shadow-sm w-full">
										<input @keyup.enter="search" class="input join-item w-full" placeholder="–ü–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫" v-model="searchString" />
										<label for="search-select" class="hidden"></label>
										<select id="search-select" v-model="tag" class="select join-item border-0 border-gray-300 border-solid border-l max-w-24 sm:max-w-52">
											<option disabled selected value="_">–¢—ç–≥</option>
											for _, tag := range tags {
												<option value={ tag.Value }>{ tag.Value }</option>
											}
										</select>
										if info.SelectedTag != "" || info.TextSearch != "" {
											<a href="/" class="btn bg-white text-black join-item" aria-label="—É–±—Ä–∞—Ç—å –ø–æ–∏—Å–∫">x</a>
										}
										<div class="indicator">
											<button class="btn btn-primary join-item" @click="search" aria-label="–ò—Å–∫–∞—Ç—å">–ü–æ–∏—Å–∫</button>
										</div>
									</div>
								</div>
								<div class="flex w-full justify-between items-center">
									<div class="text-gray-600">
										–ü–æ—Å—Ç–æ–≤: { fmt.Sprintf("%d", pagination.Total) }
									</div>
									@Pagination(pagination)
								</div>
								if len(posts) == 0 {
									<div class="card bg-white w-full">
										<div class="card-body p-6">
											<div class="text-center">
												–ü–æ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üò¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å
											</div>
										</div>
									</div>
								}
								<div class="grid justify-center grid-cols-1 md:grid-cols-2 gap-4">
									for _, post := range posts {
										<div class="card shadow-sm bg-white w-full overflow-hidden" :set={ fmt.Sprintf(`post = dataById["%s"]`, post.Id) }>
											if len(post.Media) == 1 {
												<div class="flex justify-center">
													if strings.Contains(strings.ToLower(post.Media[0]), ".mp4") || strings.Contains(strings.ToLower(post.Media[0]), ".mov") || strings.Contains(strings.ToLower(post.Media[0]), ".webm") {
														<video 
															src={ "/api/files/" + post.Media[0] } 
															class="max-h-80 cursor-pointer" 
															controls
														/>
													} else {
														<img 
															src={ "/api/files/" + post.Media[0] } 
															class="max-h-80 cursor-pointer hover:opacity-90 transition-opacity" 
															data-photo={ post.Media[0] }
															alt={ path.Base(post.Media[0]) }
															onclick="openImageModal(this.dataset.photo)"
														/>
													}
												</div>
											} else if len(post.Media) > 1 {
												<div class="grid grid-cols-2 gap-2">
													for _, photo := range post.Media {
														<div class="flex justify-center">
															if strings.Contains(strings.ToLower(photo), ".mp4") || strings.Contains(strings.ToLower(photo), ".mov") || strings.Contains(strings.ToLower(photo), ".webm") {
																<video 
																	src={ "/api/files/" + photo } 
																	class="w-full h-60 object-cover cursor-pointer" 
																	controls
																/>
															} else {
																<img 
																	src={ "/api/files/" + photo } 
																	class="w-full h-60 object-cover cursor-pointer hover:opacity-90 transition-opacity" 
																	data-photo={ photo }
																	onclick="openImageModal(this.dataset.photo)"
																	alt={ path.Base(photo) }
																/>
															}
														</div>
													}
												</div>
											}
											<div class="card-body break-words p-4 pt-4 pb-0">
												<div class="flex justify-between items-end">
													<div class=" text-gray-500">
														{ post.Created.Time().Format("2006-01-02 15:04") }
													</div>
												</div>
												// TODO: return in future
												// if post.Title != "" {
												// 	<a href={ templ.SafeURL(GetPostUrl(post.Post)) } class="text-xl font-bold mt-2">{ post.Title }</a>
												// }
												if post.TextWithMarkup != "" {
													<div class="link-as-contents" v-show="!post.collapsed">
														@templ.Raw(post.TextWithMarkup)
													</div>
												} else if post.Text != "" {
													<div class="link-as-contents" v-show="!post.collapsed">
														@templ.Raw(post.Text)
													</div>
												}
												<div class="link-as-contents" v-html="cropText(post.text_with_markup)" v-show="post.collapsed"></div>
												<div class="btn mt-4" v-show="post.collapsed" @click={ fmt.Sprintf("expandPostText('%s')", post.Id) } aria-label="–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—Å—Ç">
													–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å
													<svg class="w-6 h-6 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
														<path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m19 9-7 7-7-7"/>
													</svg>
												</div>
											</div>
											if post.LinkPreview != nil {
												<a href={ templ.SafeURL(post.LinkPreview.URL) } target="_blank" class="flex p-2 hover:bg-slate-50 transition-colors border border-gray-200 rounded-md m-4 mb-0 overflow-hidden">
													if post.LinkPreview.Image != "" {
														<img src={ post.LinkPreview.Image } alt={ post.LinkPreview.Title } class="w-24 h-24 object-cover rounded"/>
													}
													<div class="flex flex-col ml-4 overflow-hidden">
														<div class="font-bold line-clamp-2">{ post.LinkPreview.Title }</div>
														if post.LinkPreview.Description != "" {
															<div class="text-sm text-gray-600 mt-1 line-clamp-2">{ post.LinkPreview.Description }</div>
														}
														<div class="text-sm text-gray-500 mt-1">{ post.LinkPreview.URL }</div>
													</div>
												</a>
											}
											<div class="card-actions p-4 justify-between mt-auto">
												                            <a 
                                class="btn btn-ghost btn-sm" 
                                href={ templ.SafeURL(GetPostUrl(post.Post))}
                                aria-label={ fmt.Sprintf("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: %d", post.CommentsCount) }
                            >
                                { fmt.Sprintf("%d", post.CommentsCount) }
                                <svg class="w-6 h-6 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
														<path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 17h6l3 3v-3h2V9h-2M4 4h11v8H9l-3 3v-3H4V4Z"/>
													</svg>
                            </a>
                            <a 
                                class="btn btn-sm btn-primary" 
                                href={ templ.SafeURL(GetPostUrl(post.Post))} 
                                v-if="post.comments_count > 0"
                                aria-label="–ß–∏—Ç–∞—Ç—å –ø–æ—Å—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é"
                            >–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ</a>
                            <a 
                                class="btn btn-ghost btn-sm right-0" 
                                target="_blank" 
                                href={ templ.SafeURL(fmt.Sprintf("https://t.me/%s/%d", post.TgChatUsername, post.TgMessageId)) }
                                aria-label="–û—Ç–∫—Ä—ã—Ç—å –ø–æ—Å—Ç –≤ Telegram"
                            >
                                <svg class="w-4 h-4 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
														<path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.213 9.787a3.391 3.391 0 0 0-4.795 0l-3.425 3.426a3.39 3.39 0 0 0 4.795 4.794l.321-.304m-.321-4.49a3.39 3.39 0 0 0 4.795 0l3.424-3.426a3.39 3.39 0 0 0-4.794-4.795l-1.028.961"/>
													</svg>
                            </a>
											</div>
										</div>
									}
								</div>
								<div class="flex w-full justify-center">
									@Pagination(pagination)
								</div>
							</div>
						</div>
					</div>
					<div class="w-full p-4 sm:p-6">
						@partials.Footer(info.Footer)
					</div>
				</div>
			</div>
		</div>
		<dialog id="imageModal" class="modal backdrop:bg-black/50 p-4 w-full rounded-lg overflow-hidden bg-transparent">
			<div class="relative">
				<img id="modalImage" class="max-w-[95vw] max-h-[95vh] object-contain" src="" alt="modal"/>
				<button onclick="closeImageModal()" class="absolute top-2 right-2 bg-black/50 hover:bg-black/70 text-white rounded-full p-2 transition-colors" aria-label="–ó–∞–∫—Ä—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ">
					<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
					</svg>
				</button>
			</div>
		</dialog>
		<script>
			function openImageModal(photoPath) {
				const modal = document.getElementById('imageModal');
				const modalImg = document.getElementById('modalImage');
				modalImg.src = '/api/files/' + photoPath;
				modal.showModal();
			}

			function closeImageModal() {
				const modal = document.getElementById('imageModal');
				modal.close();
			}

			// Close modal when clicking outside
			document.getElementById('imageModal').addEventListener('click', function(event) {
				if (event.target === this) {
					this.close();
				}
			});
		</script>
	}
}